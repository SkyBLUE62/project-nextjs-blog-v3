// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  email     String    @unique
  name      String
  password  String    @default("")
  job       String    @default("")
  role      Role      @default(USER)
  Post      Post[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id            String  @id @default(cuid())
  type          String
  provider      String  @db.VarChar(191)
  accountId     String  @db.VarChar(191)
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?
  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, accountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String
  post      Post[]
}

model Post {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String   @default("") @db.VarChar(255)
  slug          String   @default("") @db.VarChar(255)
  description   String   @default("") @db.MediumText
  content       String   @default("") @db.MediumText
  image         String   @default("") @db.VarChar(255)
  published     Boolean  @default(false)
  popularTopics Boolean  @default(false)
  editorPick    Boolean  @default(false)
  bigPost       Boolean  @default(false)
  slide         Boolean  @default(false)
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
}

enum Role {
  USER
  ADMIN
}
